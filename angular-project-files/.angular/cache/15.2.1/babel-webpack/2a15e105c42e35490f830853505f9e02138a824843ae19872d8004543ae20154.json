{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  //private user: UserObject = {name: this.name};\n  constructor(http) {\n    this.http = http;\n    this.ip = location.host;\n    this.apiUrl = 'http://localhost:3621';\n  }\n  setUsername(name) {\n    this.name = name;\n  }\n  returnUsername() {\n    return this.name;\n  }\n  ngOnInit() {}\n  updateUsername() {\n    const str = this.getUsername();\n    const word = this.extractWord(str);\n    return word;\n  }\n  extractWord(str) {\n    const match = str.match(/\"([^\"]*)\"/g);\n    if (match && match.length > 1) {\n      return match[1].replace(/\"/g, '');\n    }\n    return '';\n  }\n  // getDebug() {\n  //    this.tempName = this.apiUrl + '/debug';\n  //    return this.http.get<Name>(this.tempName);\n  // }\n  // getUsername(): Observable<string> {\n  //   this.tempName = this.apiUrl + '/debug';\n  //   return this.http.get<Name>(this.tempName).pipe(\n  //     map((data: Name) => {\n  //       this.debugString = data;\n  //       console.log(this.debugString.Name); // should output \"debug\"\n  //       return this.debugString.Name;\n  //     })\n  //   );\n  // }\n  getDebugAsString() {\n    this.tempName = this.apiUrl + '/debug';\n    this.http.get(this.tempName).pipe(map(data => JSON.stringify(data))).subscribe(result => {\n      this.tempString = result;\n      console.log(this.tempString);\n    });\n    return this.tempString;\n  }\n  getDebug() {\n    this.tempName = this.apiUrl + '/debug';\n    this.http.get(this.tempName).pipe(map(data => data)).subscribe(result => {\n      this.tempString1 = JSON.stringify(result);\n      const tempObject = JSON.parse(this.tempString1);\n      this.tempString1 = tempObject.name;\n      console.log(this.tempString1);\n    });\n    return this.tempString1;\n  }\n  getUsername() {\n    this.tempName = this.apiUrl + '/getName';\n    this.http.get(this.tempName).pipe(map(data => data)).subscribe(result => {\n      this.tempString1 = JSON.stringify(result);\n      const tempObject = JSON.parse(this.tempString1);\n      this.tempString1 = tempObject.name;\n      console.log(this.tempString1);\n    });\n    return this.tempString1;\n  }\n  postUsername(name) {\n    this.tempName = this.apiUrl + '/setName';\n    this.http.post(this.tempName, name, {\n      responseType: 'json'\n    }).subscribe(res => {\n      console.log(res);\n    });\n  }\n  retrieveUsername() {\n    //return this.http.get<Confix>\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["map","UserService","constructor","http","location","host","setUsername","name","returnUsername","ngOnInit","updateUsername","str","getUsername","word","extractWord","match","length","replace","getDebugAsString","tempName","apiUrl","get","pipe","data","JSON","stringify","subscribe","result","tempString","console","log","getDebug","tempString1","tempObject","parse","postUsername","post","responseType","res","retrieveUsername","factory","providedIn"],"sourceRoot":"","sources":["/Users/zingen/Documents/Programming Projects/BORE/angular-project-files/src/app/services/user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { Component, OnInit } from '@angular/core';\nimport { map } from 'rxjs/operators';\n\ninterface Name {\n  Name: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  name!: string;\n  debugString!: Name;\n  tempString!: string;\n  tempString1!: string;\n  username!: string;\n\n  tempName!: string;\n  ip = location.host;\n  private apiUrl = 'http://localhost:3621';\n  //private user: UserObject = {name: this.name};\n\n  constructor(private http: HttpClient) {}\n\n  setUsername(name: string) {\n    this.name = name;\n  }\n\n  returnUsername() {\n    return this.name;\n  }\n\n  ngOnInit() {\n    \n  }\n\n  updateUsername(): string {\n    const str = this.getUsername();\n    const word = this.extractWord(str);\n    return word;\n  }\n\n  extractWord(str: string): string {\n    const match = str.match(/\"([^\"]*)\"/g);\n    if (match && match.length > 1) {\n      return match[1].replace(/\"/g, '');\n    }\n    return '';\n  }\n  // getDebug() {\n  //    this.tempName = this.apiUrl + '/debug';\n  //    return this.http.get<Name>(this.tempName);\n  // }\n\n  // getUsername(): Observable<string> {\n  //   this.tempName = this.apiUrl + '/debug';\n  //   return this.http.get<Name>(this.tempName).pipe(\n  //     map((data: Name) => {\n  //       this.debugString = data;\n  //       console.log(this.debugString.Name); // should output \"debug\"\n  //       return this.debugString.Name;\n  //     })\n  //   );\n  // }\n  getDebugAsString(): string {\n    this.tempName = this.apiUrl + '/debug';\n    this.http.get(this.tempName).pipe(\n      map(data => JSON.stringify(data))\n    )\n    .subscribe(result => {\n      this.tempString = result;\n      console.log(this.tempString); \n    });\n    return this.tempString;\n  }\n  \n  getDebug(): string {\n    this.tempName = this.apiUrl + '/debug';\n    this.http.get(this.tempName).pipe(\n      map(data => (data))\n    )\n    .subscribe(result => {\n      this.tempString1 = JSON.stringify(result);\n      const tempObject = JSON.parse(this.tempString1);\n      this.tempString1 = tempObject.name;\n      console.log(this.tempString1); \n    });\n\n    return this.tempString1;\n  }\n\n  getUsername(): string {\n    this.tempName = this.apiUrl + '/getName';\n    this.http.get(this.tempName).pipe(\n      map(data => (data))\n    )\n    .subscribe(result => {\n      this.tempString1 = JSON.stringify(result);\n      const tempObject = JSON.parse(this.tempString1);\n      this.tempString1 = tempObject.name;\n      console.log(this.tempString1); \n    });\n\n    return this.tempString1;\n  }\n  \n  postUsername(name: string) {\n    this.tempName = this.apiUrl + '/setName';\n    this.http.post(this.tempName, name, {responseType: 'json'})\n    .subscribe((res) => {\n      console.log(res);\n    });\n    \n  }\n\n  \n\n\n  retrieveUsername() {\n    //return this.http.get<Confix>\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}